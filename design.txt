Place your design document here.


/********************** syscall.c ***************************/
switch
	6 cases
	call functions in file.c 


/*********************** proc.h *****************************/

struct proc{
	char *p_name;			/* Name of this process */
	struct spinlock p_lock;		/* Lock for this structure */
	unsigned p_numthreads;		/* Number of threads in this process */

	/* VM */
	struct addrspace *p_addrspace;	/* virtual address space */

	/* VFS */
	struct vnode *p_cwd;		/* current working directory */

	struct fdesc * fdesc_table[];
}

proc->fdesc_array[file_descrptor]


/*********************** file.h *****************************/
	
struct file_descriptor{
	char file_name[NAME_MAX];
	struct opfile * open_file; // the index of opfile_table
	int refcount;
}

//struct fdsec_table{
	int next_insert_pos;	
	struct fdesc * fd_array[MAX_FILES];
//}

struct opfile{
	enum op_status *rw
	struct vnode *vn;
	int refcount;
}

//struct opfile_table{
//	struct opfile *op_array[MAX_FILES]
//}


enum op_status{ READ, WRITE}

/*********************** file.c ****************************/

/*---------------------------------------------------------*/
fdtable_init:
	initialize fdtable with 0,1,2



/*---------------------------------------------------------*/
sys_open:
1. file descriptor table:
	fd start at 3
	check if fd taken, then ++
	check MAX

2. vfs_open:
	filepath from userlevel to kernel level
	kmalloc buf
	vfs_open(buf,flags, mode)
	error handle
	free buf in every cases

3. safety check:
	fdtable lock
	input boundary check
	mem free

/*---------------------------------------------------------*/
sys_read:
1. input check:
	fd boundary check
	fd emptiness check 

2. VOP_READ:
	init struct iovec, ->ubase = buf
	init struct uio, ->uio_iov = &iov
	VOP_READ()
	error handle
	offset reset

3. safety check:
	fdtable lock
	input boundary check
	mem free


/*---------------------------------------------------------*/
sys_write:
1. input check: 
	fd boundary check
	fd emptiness check 

2. VOP_WRITE:
	init struct iovec, ->ubase = buf
	init struct uio, ->uio_iov = &iov
	VOP_WRITE()
	error handle
	offset reset

3. safety check:
	fdtable lock
	input boundary check
	mem free


/*---------------------------------------------------------*/
sys_close:
1. input check: 
	fd boundary check
	fd emptiness check 

2. VOP_CLOSE:
	lock_destroy fd lock
	free fdtable
	fdtable refcount --

/*---------------------------------------------------------*/
sys_dup2:
1. input check: 
	fd boundary check
	fd emptiness check
	fdold != fdnew check
	
2. file descriptor copy
	all param old copy to new
	strcpy name

3. safety check:
	fdtable lock
	input boundary check
	mem free

/*---------------------------------------------------------*/
sys_lseek:
1. input check: 
	fd boundary check
	fd emptiness check

2. VOP_STAT:
	acquire lock
	VOP_STAT
	
3. whence:
	switch:{SEEK_SET, SEEK_CUR, SEEK_END}
	VOP_TRYSEEK
	error handle
	lock release

4. safety check:
	fdtable lock
	input boundary check
	mem free


/******************** runprogram.c *************************/

